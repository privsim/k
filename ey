#!/bin/bash

# Function to install packages using apt (Debian/Ubuntu)
install_apt_packages() {
  sudo apt update
  sudo apt install -y yubikey-manager yubikey-personalization scdaemon gnupg2 gnupg-agent pcscd pcsc-tools keychain
}

# Function to install packages using brew (macOS)
install_brew_packages() {
  brew install ykman ykpers gnupg pinentry-mac pcsc-tools keychain
  brew services start pcscd
  echo "pinentry-program /usr/local/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
}

# Function to install packages using dnf (Fedora)
install_dnf_packages() {
  sudo dnf install -y yubikey-manager yubikey-personalization scdaemon gnupg2 gnupg-agent pcscd pcsc-tools keychain
}

# Function to install packages using yum (CentOS)
install_yum_packages() {
  sudo yum install -y epel-release
  sudo yum install -y yubikey-manager yubikey-personalization scdaemon gnupg2 gnupg-agent pcscd pcsc-tools keychain
}

# Function to install packages using pacman (Arch Linux)
install_pacman_packages() {
  sudo pacman -Syu --noconfirm
  sudo pacman -S --noconfirm yubikey-manager yubikey-personalization scdaemon gnupg pcsc-tools keychain
}

# Function to install packages using zypper (OpenSUSE)
install_zypper_packages() {
  sudo zypper refresh
  sudo zypper install -y yubikey-manager yubikey-personalization scdaemon gnupg2 gnupg-agent pcscd pcsc-tools keychain
}

# Detect package manager and install packages
if command -v apt &> /dev/null; then
  install_apt_packages
elif command -v brew &> /dev/null; then
  install_brew_packages
elif command -v dnf &> /dev/null; then
  install_dnf_packages
elif command -v yum &> /dev/null; then
  install_yum_packages
elif command -v pacman &> /dev/null; then
  install_pacman_packages
elif command -v zypper &> /dev/null; then
  install_zypper_packages
else
  echo "Unsupported package manager. Please install the required packages manually."
  exit 1
fi

# Fetch the public key from YubiKey
gpg --card-edit

# After running --card-edit, fetch the key to the local keyring
echo "Fetching key to local keyring..."
read -p "Enter the GPG key ID: " KEY_ID
gpg --recv-keys $KEY_ID

# Get the keygrip and add it to sshcontrol
echo "Adding keygrip to sshcontrol..."
KEYGRIP=$(gpg --with-keygrip --list-secret-keys $KEY_ID | grep Keygrip | awk '{print $3}')
echo $KEYGRIP >> ~/.gnupg/sshcontrol

# Harden gpg.conf according to best practices
echo "Hardening gpg.conf..."
cat <<EOL >> ~/.gnupg/gpg.conf
use-agent
personal-cipher-preferences AES256 AES192 AES
personal-digest-preferences SHA512 SHA384 SHA256
default-preference-list AES256 AES192 AES SHA512 SHA384 SHA256
cert-digest-algo SHA512
digest-algo SHA512
s2k-digest-algo SHA512
s2k-mode 3
s2k-count 65011712
no-emit-version
keyserver hkps://keys.openpgp.org
keyserver-options auto-key-retrieve
EOL

# Configure gpg-agent.conf for better GPG agent handling
echo "Configuring gpg-agent.conf..."
cat <<EOL >> ~/.gnupg/gpg-agent.conf
default-cache-ttl 600
max-cache-ttl 7200
enable-ssh-support
EOL

# Extract the key name for SSH
echo "Extracting key name for SSH..."
KEY_NAME=$(gpg --with-colons --fingerprint | grep fpr | head -n 1 | cut -d ':' -f 10)

# Add Keychain and GPG environment variables to shell config
echo "Adding Keychain and GPG environment variables to shell config..."
SHELL_CONFIG="$HOME/.bashrc"
[[ -f "$HOME/.zshrc" ]] && SHELL_CONFIG="$HOME/.zshrc"

cat <<EOL >> $SHELL_CONFIG
export GPG_TTY="\$(tty)"
gpg-connect-agent updatestartuptty /bye > /dev/null
export SSH_AUTH_SOCK=\$(gpgconf --list-dirs agent-ssh-socket)
eval \$(keychain --eval --agents ssh,gpg --inherit any -q $KEY_NAME)
EOL

# Source the shell config to apply changes
source $SHELL_CONFIG

echo "Configuration complete. Please restart your terminal or run 'gpgconf --kill all' to apply changes."
